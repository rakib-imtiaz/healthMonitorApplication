# -*- coding: utf-8 -*-
"""CSE499B Brain Tumor Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qdFNiG7hSdw4ys_R6D1gzjgH1zvN4frf

Load Modules
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score



"""### Prepare/collect data"""

import os

import os
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = '/home/mohammadnoman/.local/lib/python3.8/site-packages/cv2/qt/plugins'

path = os.listdir('brain_tumor/Training')
classes = {'no_tumor':0, 'pituitary_tumor':1}

# path = os.listdir(folder_path)
print(path)

classes = {'no_tumor':0, 'pituitary_tumor':1}

# !pip3 install opencv-python

import cv2
X = []
Y = []
count=0

for cls in classes:
    pth = 'brain_tumor/Training/'+cls
    for j in os.listdir(pth):
        img = cv2.imread(pth+'/'+j, 0)
        if img is not None:
         # Resize the image
            img = cv2.resize(img, (200, 200))
            X.append(img)
            Y.append(classes[cls])
            print("successfull",count)
            count=count+1
        # Rest of your code
        else:
            print("Failed to load the image.")

     

X = np.array(X)
Y = np.array(Y)

X_updated = X.reshape(len(X), -1)

np.unique(Y)

pd.Series(Y).value_counts()

X.shape, X_updated.shape

"""### Visualize data"""

plt.imshow(X[0], cmap='gray')

"""### Prepare data"""

X_updated = X.reshape(len(X), -1)
X_updated.shape

"""### Split Data"""

xtrain, xtest, ytrain, ytest = train_test_split(X_updated, Y, random_state=10,
                                               test_size=.20)

xtrain.shape, xtest.shape

"""### Feature Scaling"""

print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())
xtrain = xtrain/255
xtest = xtest/255
print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())

"""### Feature Selection: PCA"""

from sklearn.decomposition import PCA

print(xtrain.shape, xtest.shape)

pca = PCA(.98)
# pca_train = pca.fit_transform(xtrain)
# pca_test = pca.transform(xtest)
pca_train = xtrain
pca_test = xtest

# print(pca_train.shape, pca_test.shape)
# print(pca.n_components_)
# print(pca.n_features_)

"""### Train Model"""

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

import warnings
warnings.filterwarnings('ignore')

lg = LogisticRegression(C=0.1)
lg.fit(xtrain, ytrain)

sv = SVC()
sv.fit(xtrain, ytrain)

"""### Evaluation"""

print("Training Score:", lg.score(xtrain, ytrain))
print("Testing Score:", lg.score(xtest, ytest))

print("Training Score:", sv.score(xtrain, ytrain))
print("Testing Score:", sv.score(xtest, ytest))

"""### Prediction"""

pred = sv.predict(xtest)

misclassified=np.where(ytest!=pred)
misclassified

print("Total Misclassified Samples: ",len(misclassified[0]))
print(pred[36],ytest[36])

"""### TEST MODEL"""

dec = {0:'No Tumor', 1:'Positive Tumor'}

plt.figure(figsize=(12,8))
p = os.listdir('brain_tumor/Testing/')
c=1
for i in os.listdir('brain_tumor/Testing/no_tumor/')[:9]:
    plt.subplot(3,3,c)
    
    img = cv2.imread('brain_tumor/Testing/no_tumor/'+i,0)
    img1 = cv2.resize(img, (200,200))
    img1 = img1.reshape(1,-1)/255
    p = sv.predict(img1)
    plt.title(dec[p[0]])
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    c+=1

plt.figure(figsize=(12,8))
p = os.listdir('brain_tumor/Testing/')
c=1
for i in os.listdir('brain_tumor/Testing/pituitary_tumor/')[:16]:
    plt.subplot(4,4,c)
    
    img = cv2.imread('brain_tumor/Testing/pituitary_tumor/'+i,0)
    img1 = cv2.resize(img, (200,200))
    img1 = img1.reshape(1,-1)/255
    p = sv.predict(img1)
    plt.title(dec[p[0]])
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    c+=1